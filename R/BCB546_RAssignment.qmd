---
title: "BCB_R"
format: revealjs
editor: visual
---

##### Load Libraries

```{r}
library(ggplot2)
library(dplyr)
library(tidyverse)
```

### Data Inspection 

To find information about the size, dimensions (row x column), the code below can be used.

```{r}
# Change dirs according to your device
seq <- read.table("fang_et_al_genotypes.txt", header = T, stringsAsFactors = T)
snp <- read.delim("snp_position.txt", header = T, stringsAsFactors = F)

cat("fang_e_al_genotypes.txt Information: \n", "Size: ", file.info("C:/Users/mshumaly/Documents/bcb1/R/fang_et_al_genotypes.txt")$size, "\n", "Dimensions: (row by column)", dim(seq) , "\n", "For the structure of data str(seq) can be used \n \n")
cat("snp_position.txt Information: \n", "Size: ", file.info("C:/Users/mshumaly/Documents/bcb1/R/snp_position.txt")$size,
    "\n", "Dimensions: (row by column)", dim(snp) , "\n", "For the structure of data str(snp) can be used \n \n")

class(seq)
class(snp)

```

### Data Processing

##### Maize Data

```{r}
# names(seq) # shows the column is named as Group
maize <- dplyr::filter(seq, Group %in% c("ZMMIL","ZMMLR","ZMMMR"))
# To check if the grouping is done correctly
unique(maize$Group)

# Deleting the columns named "Sample_ID" and "JG_OTU". For this analysis only the chromosomes are needed. + Transposing the dataframe
maize <- t(maize[,c(-1,-2)])

# Get columns "1","3", and "4" corresponding to "SNP_ID", "Chromosome", and "Position".
snps <- snp[,c(1,3,4)]

# Merge two dataframes according to SNP_ID
Final_df <- merge(snps, maize, by.x = "SNP_ID", by.y = "row.names")

# Replace all "-" values with "?"
Final_df2 <- data.frame(apply(Final_df,2, function(x) gsub("\\?/\\?", "-/-", x)))

# Type correction
Final_df$Position <- as.numeric(Final_df$Position)
Final_df2$Position <- as.numeric(Final_df2$Position)

# Separate the dataframes based on the 10 Chromosome numbers
separated_chromosome <- split(Final_df, Final_df$Chromosome)

# Sort each one based on the Position
sorted <- lapply(separated_chromosome, function(x) x[order(x$Position), ])

# Write each subset to separate files
for (i in seq_along(sorted)) {
  file_name <- paste0("MaizeIncreasing_", names(sorted)[i], ".csv")
  write.csv(sorted[[i]], file = file_name, row.names = FALSE)
}

# Decreasing order
  # Final_df2 = dataframe with - missing values
separated_chromosome <- split(Final_df2, Final_df2$Chromosome)
sorted <- sorted <- lapply(separated_chromosome, function(x) x[order(x$Position, decreasing = TRUE), ])
for (i in seq_along(sorted)) {
  file_name <- paste0("MaizeDecreasing_", names(sorted)[i], ".csv")
  write.csv(sorted[[i]], file = file_name, row.names = FALSE)
}
```

##### Teosinte Data

```{r}
# Same process is followed here
teosinte <- dplyr::filter(seq, Group %in% c("ZMPBA", "ZMPIL", "ZMPJA"))
unique(teosinte$Group)

teosinte <- t(teosinte[,c(-1,-2)])
snps <- snp[,c(1,3,4)]
Final_dfT <- merge(snps, teosinte, by.x = "SNP_ID", by.y = "row.names")
Final_df2T <- data.frame(apply(Final_dfT,2, function(x) gsub("\\?/\\?", "-/-", x)))

Final_dfT$Position <- as.numeric(Final_dfT$Position)
Final_df2T$Position <- as.numeric(Final_df2T$Position)

separated_chromosome <- split(Final_dfT, Final_dfT$Chromosome)
sorted <- lapply(separated_chromosome, function(x) x[order(x$Position), ])
for (i in seq_along(sorted)) {
  file_name <- paste0("TeosinteIncreasing_", names(sorted)[i], ".csv")
  write.csv(sorted[[i]], file = file_name, row.names = FALSE)
}

separated_chromosome <- split(Final_df2T, Final_df2T$Chromosome)
sorted <- sorted <- lapply(separated_chromosome, function(x) x[order(x$Position, decreasing = TRUE), ])
for (i in seq_along(sorted)) {
  file_name <- paste0("TeosinteDecreasing_", names(sorted)[i], ".csv")
  write.csv(sorted[[i]], file = file_name, row.names = FALSE)
}
```

### Visualization

##### Below is the frequency of SNPs based on the chromosomes for each dataset.

```{r}
# Maize dataset is called Final_df and Teosinte dataset is Final_dfT
# Frequency of SNP per Chromosome in Maize
m <- data.frame(table(Final_df$Chromosome))

# Frequency of SNP per Chromosome in Teosinte
t <- data.frame(table(Final_dfT$Chromosome))

# Final dataframe to visualize
labels <- rep(c("Maize", "Teosinte"), each = 12)
plot <- cbind(rbind(m,t), labels)

ggplot(plot, aes(x = factor(Var1), y = Freq, fill = labels)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  labs(x = "Chromosome", y = "SNP counts", fill = "Labels")

```

##### Heterozygosity and missing data

```{r}
missing_data <- sum(grepl("\\?/\\?", unlist(Final_df)))

# Maize counts
maize_homo <- sum(grepl("\\A/\\A", unlist(Final_df))) + sum(grepl("\\C/\\C", unlist(Final_df))) + sum(grepl("\\G/\\G", unlist(Final_df))) + sum(grepl("\\T/\\T", unlist(Final_df)))
all <- 983*1576 # The info in each dataframe based on the dimensions of it
maize_hetero <- all - maize_homo

# Teosinte counts
teosinte_homo <- sum(grepl("\\A/\\A", unlist(Final_dfT))) + sum(grepl("\\C/\\C", unlist(Final_dfT))) + sum(grepl("\\G/\\G", unlist(Final_dfT))) + sum(grepl("\\T/\\T", unlist(Final_dfT)))
teosinte_hetero <- all - teosinte_homo

data <- data.frame(
  x = c("Heterozygous", "Heterozygous", "Homozygous", "Homozygous"),
  y = c(maize_hetero, teosinte_hetero, maize_homo, teosinte_homo),
  labels = c('Maize', 'Teosinte', 'Maize', 'Teosinte')
)
ggplot(data, aes(x = factor(x), y = y, fill = labels)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  labs(x = "Heterozygous vs Homozygous", y = "Count", fill = "Labels", title = "Comparison between Maize and Teosinte. Missing values = 74945")


```

##### Visualizing positions based on chromosome number (My choice)

```{r}
ggplot(Final_df, aes(x = as.numeric(Chromosome), y = Position, color = Chromosome)) +
  geom_point(size = 2) +
  labs(x = "Chromosome", y = "Position", color = "Chromosome") +
  theme_minimal()
```
